$talent-tree-badge-transition-duration: 240ms;

/**
 * Component: TalentTree
 */
@include comp('talent-tree') {
  position: relative;
  flex: 1;
  padding: 0 rem($gap-base);

  text-shadow: 0 rem(2) rem(2) $color-black;

  @include elem('container') {
    position: relative;
    border: rem($border-base) solid transparent;

    box-shadow: raise-shadow();
  }

  @include elem('background', 'background-texture') {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }

  @include elem('background') {
    opacity: $opacity-background;
  }

  @include elem('background-texture') {
    // background: center / cover no-repeat
    //   resources('images/backgrounds/background_play_button_large_2x_png.png');
    background-blend-mode: multiply;
  }

  @include elem('wrapper', 'title', 'item', 'item-inner', 'level') {
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    align-content: stretch;
    align-items: stretch;
  }

  @include elem('wrapper') {
    justify-content: space-between;
    position: relative;
    margin: 0 rem(-$gap-base);
    padding: rem(gap('small')) 0;
  }

  @include elem('title', 'item', 'level', 'badge-wrapper') {
    position: relative;
    flex: 1 1 100%;
    margin: rem(gap('small')) 0;
  }

  @include elem('title') {
    z-index: 1;
    order: -50;

    font-weight: normal;
  }

  @include elem('item') {
    cursor: pointer;

    z-index: 1;
    max-width: 48%;

    border: rem($border-base) solid transparent;

    box-shadow: raise-shadow();

    @for $i from 0 through 7 {
      @include when('#{$i}') {
        order: (-$i * 2);
      }
    }
  }

  @include elem('item-inner') {
    flex: 1;
    align-content: center;
    padding: rem($gap-base / 2) rem($gap-base);
  }

  @include elem('level') {
    z-index: 2;
    align-content: center;
    max-width: 0;

    @include when('10') {
      order: -1;
    }
    @include when('15') {
      order: -5;
    }
    @include when('20') {
      order: -9;
    }
    @include when('25') {
      order: -13;
    }
  }
  @include elem('level-inner') {
    margin: rem(-$level-size / 2);
  }

  $badge-size: 96;
  @include elem('badge-wrapper') {
    cursor: pointer;

    position: relative;
    max-width: rem($badge-size);
    height: rem($badge-size);
    margin: 0 auto;

    border-radius: 50%;

    box-shadow: raise-shadow();
  }

  @include elem('badge') {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    width: rem($badge-size);
    height: rem($badge-size);
    background: center / contain no-repeat;

    @include when('background') {
      background-image: resources('images/hud/reborn/statbranch_button_bg_psd.png');
    }

    @include when('levelup') {
      background-image: resources('images/hud/reborn/statbranch_button_lvlup_psd.png');

      @keyframes talent-tree-badge-breath {
        from {
          opacity: 0.3;
        }
        to {
          opacity: 0.9;
        }
      }
      animation: talent-tree-badge-breath 1s ease infinite alternate;
    }

    @keyframes talent-tree-badge-leaf-breath {
      from {
        filter: drop-shadow(0 0 rem(2) $glow-color);
      }
      to {
        filter: drop-shadow(0 0 rem(3) $glow-color);
      }
    }

    @each $level in (10, 15, 20, 25) {
      @include when($level) {
        opacity: 0;
        background-image: resources(
          'images/hud/reborn/statbranch_button_pip#{$level}_psd.png'
        );

        animation: talent-tree-badge-leaf-breath 1s ease infinite alternate;
      }
      @include when-or('left', 'right') {
        opacity: 1;
      }
      @include when('left') {
        transform: rotateY(180deg);
      }
    }

    @each $level in (10, 15, 20, 25) {
      @include when($level) {
        background-image: resources(
          'images/hud/reborn/statbranch_button_pip#{$level}_psd.png'
        );
      }
    }

    transition: ease $talent-tree-badge-transition-duration;
    transition-property: opacity transform;
  }

  @include elem('badge-progress') {
    position: absolute;
    bottom: rem(6);
    left: 0;
    right: 0;
    width: rem(2);
    margin: auto;
    background: linear-gradient(to top, $highlight-color, $glow-color);

    @for $count from 0 through 4 {
      @include when($count) {
        height: rem($count * 56 / 4);
      }
    }

    @keyframes talent-tree-badge-progress-breath {
      from {
        box-shadow: (0 0 rem(2) $glow-color, 0 0 rem(3) rgba($glow-color, 0.5));
      }
      to {
        box-shadow: (0 0 rem(4) $glow-color, 0 0 rem(6) rgba($glow-color, 0.5));
      }
    }
    animation: talent-tree-badge-progress-breath 1s ease infinite alternate;

    transition: height ease $talent-tree-badge-transition-duration;
  }

  @each $theme in $type-theme {
    @include prop(
      (
        'theme': $theme,
      )
    ) {
      color: theme($theme);

      @include elem('container') {
        border-color: theme($theme, 'bd');
      }
      @include elem('background') {
        background-color: theme($theme, 'bg', 'lower');
      }
      @include elem('item') {
        color: theme($theme, 'fg', 'sub');
        background: theme($theme, 'bg');
        border-color: theme($theme, 'bg', 'lower');
        @include when('selected') {
          color: theme($theme, 'fg', 'emphasize');
        }
      }
    }
  }

  @include elem('item') {
    @include when('selected') {
      @each $position in ('left', 'right') {
        @include when($position) {
          @include elem('item-inner') {
            background: radial-gradient(
              circle at if($position == 'left', 80%, 20%),
              rgba($highlight-color, 0.5) 10%,
              rgba($glow-color, 0.3) 70%
            );
          }
        }
      }
    }
  }
}
